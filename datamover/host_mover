#!/usr/bin/env python3
"""
Host Mover
"""
# pylint: disable=invalid-name, broad-except
import getopt
import sys
import os
from shutil import copytree, copyfile, rmtree
from pwd import getpwnam

def usage():
    """
    Print Usage
    """
    sys.stdout.write("""Usage:

    host_mover -s SOURCE_SITE -t TARGET_SITE -H HOSTNAME

or:

    host_mover -s SOURCE_SITE -t TARGET_SITE -H "HOST1, HOST2, HOST3"

This program moves hosts between sites.
You can choice which data you want to be moved.

Even logfiles (history) will be handled. Note
that new files in format history-timestamp-hostname will
be created for the moved data. So you can do a easy cleanup

When copying files to the target site, uid and gid will be autodetected.

Options:

  -v, --verbose     Verbose mode
  -s, --source      Source OMD Site
  -t, --target      Target OMD Site
  -H, --host        Hostname or comma seperated list
  -L, --logfiles    Handle Logfiles
  -P, --perfdata    Handle Perfdata
  -A, --autochecks  Handle Autocheck files
  -I, --inventory   Handle Inventory Data
  -a, --all         Copy all Data
  -d, --debug       Output Debug Messages

""")


short_options = 'vs:t:hH:aLPAd'
long_options = [
    'verbose', 'source=', 'target=', 'host=', 'help', 'all',
    'logfiles', 'perfdata',  'autochecks', 'debug',
]

opt_verbose = False
opt_debug = False
opt_source = ""
opt_target = ""
opt_host = ""
opt_logfiles = False
opt_perfdata = False
opt_inventory = False
opt_omd_base = '/opt/omd/sites/'
opt_autochecks = False

try:
    opts, args = getopt.getopt(sys.argv[1:], short_options, long_options)
except getopt.GetoptError as err:
    sys.stderr.write("%s\n\n" % err)
    usage()
    sys.exit(1)

for o, a in opts:
    if o in ['-h', '--help']:
        usage()
        sys.exit(0)

    elif o in ['-v', '--verbose']:
        opt_verbose = True
    elif o in ['-d', '--debug']:
        opt_debug = True
    elif o in ['-s', '--source']:
        opt_source = a
    elif o in ['-t', '--target']:
        opt_target = a
    elif o in ['-H', '--host']:
        opt_host = a
    elif o in ['-a', '--all']:
        opt_logfiles = True
        opt_perfdata = True
        opt_autochecks = True
        opt_inventory = True
    elif o in ['-I', '--inventory']:
        opt_inventory = True
    elif o in ['-L', '--logfiles']:
        opt_logfiles = True
    elif o in ['-P', '--perfdata']:
        opt_perfdata = True
    elif o in ['-A', '--autochecks']:
        opt_autochecks = True
    elif o in ['-g', '--gid']:
        opt_gid = int(a)
    elif o in ['-u', '--uid']:
        opt_uid = int(a)

if not opt_host or not opt_target or not opt_source:
    usage()
    sys.exit(1)



# Helpers
def verbose(msg):
    """
    Print Verbose
    """
    if opt_verbose:
        sys.stdout.write(msg + "\n")

def debug(msg):
    """
    Debug Messages
    """
    if opt_debug:
        sys.stderr.write(msg + "\n")

ids = getpwnam(opt_target)

opt_uid = ids.pw_uid
opt_gid = ids.pw_gid
verbose("Target Site: {} UID: {}, GID: {}".format(opt_target, opt_uid, opt_gid))

source_site = opt_omd_base+opt_source+"/"
target_site = opt_omd_base+opt_target+"/"
verbose("Source Path: {}, Target Path: {}".format(source_site, target_site))

def prepare_host_url(hostname, var_part, appendix=""):
    """
    Return Source and Target url of an object
    """
    return (
        source_site + var_part + hostname + appendix,
        target_site + var_part + hostname + appendix,
    )

def find_loglines(path, searchhost):
    """
    Find all to Host related lines for a host
    """
    try:
        logfiles = list(os.walk(path))[0][2]
    except IndexError:
        sys.stderr.write("Path not found or empty: {}".format(path))
    found_lines = {}
    verbose(".. Start Parsing")
    for logfile in logfiles:
        with open(path+logfile) as data:
            verbose("... Parse: " + path+logfile)
            for line in data.readlines():
                try:
                    splited = line.split()
                    if len(splited) <= 2:
                        continue
                    if splited[1] not in ["INITIAL", "SERVICE", "HOST"]:
                        continue

                    message = line.split(":", 1)[1].strip().split(';')
                    if len(message) > 3:
                        continue
                    if splited[2].startswith('NOTIFICATION'):
                        hostname = message[0].split(':')[1].strip()
                    else:
                        hostname = message[0]

                    if searchhost != hostname:
                        continue

                    found_lines.setdefault(logfile, [])
                    found_lines[logfile].append(line)
                except Exception as error:
                    info = " -- Error Parsing line: '{}'".format(line)
                    debug(str(error)+info)
    return found_lines


def write_logfiles(path, hostname, config):
    """
    Write new logfiles
    """
    verbose(".. Start Writing")
    for logfile, lines in config.items():
        outfilename = logfile+'-'+hostname
        if logfile.endswith('-'+hostname):
            outfilename = logfile
        if not os.path.exists(path):
            os.makedirs(path)
            os.chown(path, opt_uid, opt_gid)
        with open(path+outfilename, "w+") as outfile:
            verbose("... Write "+path+outfilename)
            for line in lines:
                outfile.write(line)

        os.chown(path+outfilename, opt_uid, opt_gid)


def handle_host(hostname): #pylint: disable=too-many-branches, too-many-statements
    """
    Handle Jobs for one Host
    """
    copy_file_list = []
    copy_folder_list = []

    if opt_logfiles:
        verbose("Start Logfiles for {}...".format(hostname))
        path = 'var/check_mk/core/archive/'

        logfile_data = find_loglines(source_site+path, hostname)
        write_logfiles(target_site+path, hostname, logfile_data)
        verbose("...done")


    if opt_perfdata:
        verbose("Prepare Perfdata for {}...".format(hostname))
        path = 'var/check_mk/rrd/'
        source, target = prepare_host_url(hostname, path)
        copy_folder_list.append((source, target))
        verbose("...done")

    if opt_inventory:
        verbose("Prepare Inventory data for {}...".format(hostname))
        path = 'var/check_mk/inventory/'
        source, target = prepare_host_url(hostname, path)
        copy_file_list.append((source, target))
        copy_file_list.append((source+'.gz', target+'.gz'))
        verbose("...done")

        verbose("Prepare Inventory History data for {}...".format(hostname))
        path = 'var/check_mk/inventory_archive/'
        source, target = prepare_host_url(hostname, path)
        copy_folder_list.append((source, target))
        verbose("...done")

    if opt_autochecks:
        verbose("Prepare Autochecks for {}...".format(hostname))
        autochecks_path = 'var/check_mk/autochecks/'
        source, target = prepare_host_url(hostname, autochecks_path, '.mk')
        copy_file_list.append((source, target))
        verbose("...done")

    verbose("Staring Copy Folder Jobs for {}... ".format(hostname))
    for source, target in copy_folder_list:
        try:
            rmtree(target)
        except FileNotFoundError:
            pass
        try:
            copytree(source, target)
            os.chown(target, opt_uid, opt_gid)
            for root, _dirs, files in os.walk(target):
                for sub_file in files:
                    sub_file_path = os.path.join(root, sub_file)
                    os.chown(sub_file_path, opt_uid, opt_gid)
        except FileNotFoundError as error:
            debug("--> Not Found: {}".format(error))
        except Exception as error_obj:
            debug("--> Error while Copy Folder: {}, {}->{}".format(error_obj, source, target))
        else:
            verbose("...> Copied Folder {} to {}".format(source, target))
    verbose("...done")


    verbose("Staring Copy File Jobs for {}... ".format(hostname))
    for source, target in copy_file_list:
        try:
            copyfile(source, target)
            os.chown(target, opt_uid, opt_gid)
        except FileNotFoundError as error:
            raise
            debug("--> Not Found: {}".format(error))
        except Exception as error:
            debug("--> Error while Copy File: {}, {}->{}".format(error, source, target))
        else:
            verbose("...> Copied File {} to {}".format(source, target))
    verbose("...done")

# Start Jobs
for host in [x.strip() for x in opt_host.split(',')]:
    verbose("#################\n# {}\n#################".format(host))
    handle_host(host)
    verbose("\n\n")
