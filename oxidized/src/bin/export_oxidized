#!/usr/bin/env python3

"""
Kuhn & RueÃŸ GmbH
Consulting and Development
https://kuhn-ruess.de
"""

from logging import getLogger, basicConfig, INFO, DEBUG
from os import getenv
from os.path import isfile
from json import dumps
from re import search
from requests import Session
from subprocess import run
from sys import argv


def export(log=None, verify=True):
    log.debug("Run export ...")
    username = "oxidized"
    secret = None
    url = "https://016-mon-001/mon"
    session = None
    data = {}

    log.debug("Read secret from automation user ...")
    if not secret:
        with open(
            f"{getenv('OMD_ROOT', '')}/var/check_mk/web/{username}/automation.secret"
        ) as passwd:
            secret = passwd.read().strip()

    headers = {
        "Authorization": f"Bearer {username} {secret}",
        "Accept": "application/json",
        "Content-Type": "application/json",
    }

    if not session:
        session = Session()

    log.debug("Read hosts from Checkmk ...")
    response = session.request(
        method="GET",
        url=f"{url}/check_mk/view.py?view_name=oxidized_hosts&output_format=json",
        headers=headers,
        verify=verify,
    )

    if response.status_code >= 300 or "ERROR" in response.text:
        log.error(f"Request failed: {response.text}")

    else:
        data = response.json()
        data_list = []

        for line in data[1:]:
            match = search(r"\[([A-Za-z0-9_]+)\]", line[1])
            data_list.append({
                'hostname' : line[0],
                'os' : match.group(1),
            })
        print(dumps(data_list, indent=3))

def cron(log=None):
    # Logrotate
    log.debug("Setup logrotate ...")
    path = f"{getenv('OMD_ROOT', '')}/etc/logrotate.d/export_oxidized"

    if not isfile(path):
        data = """/omd/sites/mon/var/log/export_oxidized.log {
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
}
"""
        with open(path, "w") as f:
            f.write(data)
            f.close()

    # cron
    log.debug("Setup cronjob ...")
    path = f"{getenv('OMD_ROOT', '')}/etc/cron.d/export_oxidized"

    if not isfile(path):
        data = """#
# Export for Oxidized
#
*/15 * * * * (flock -n 200; $OMD_ROOT/local/bin/export_oxidized --cron --dis-verify) 200>/omd/sites/mon/tmp/export_oxidized.lock
"""
        with open(path, "w") as f:
            f.write(data)
            f.close()

        run("omd restart crontab", shell=True, capture_output=True)

if __name__ == '__main__':
    logger = getLogger(__name__)

    if "--dis-verify" in argv:
        disable_verify = True
    else:
        disable_verify = False

    if "--debug" in argv:
        logger.setLevel(DEBUG)
    else:
        logger.setLevel(INFO)

    if "--cron" in argv:
        basicConfig(format="%(asctime)s %(levelname)-5s: %(message)s", filename=f"{getenv('OMD_ROOT', '')}/var/log/export_oxidized.log", datefmt="%Y-%m-%d %H:%M:%S")
        logger.debug("-" * 80)
        cron(log=logger)

    else:
        basicConfig(format="%(asctime)s %(levelname)-5s: %(message)s", datefmt="%Y-%m-%d %H:%M:%S")

    export(log=logger, verify=disable_verify)
