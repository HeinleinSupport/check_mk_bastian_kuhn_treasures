#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +-----------------------------------------------------------------+
# |                                                                 |
# |        (  ___ \     | \    /\|\     /||\     /|( (    /|        |
# |        | (   ) )    |  \  / /| )   ( || )   ( ||  \  ( |        |
# |        | (__/ /     |  (_/ / | |   | || (___) ||   \ | |        |
# |        |  __ (      |   _ (  | |   | ||  ___  || (\ \) |        |
# |        | (  \ \     |  ( \ \ | |   | || (   ) || | \   |        |
# |        | )___) )_   |  /  \ \| (___) || )   ( || )  \  |        |
# |        |/ \___/(_)  |_/    \/(_______)|/     \||/    )_)        |
# |                                                                 |
# | Copyright Bastian Kuhn 2011                mail@bastian-kuhn.de | 
# +-----------------------------------------------------------------+
# cmc_psm_m
# Version 1.0 (07.04.2011)
#
# This file is a check Script for check_mk
# Information about me can be found at http://bastian-kuhn.de
# Information about check_mk at http://mathias-kettner.de/check_mk.
#
# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
#
# Table columns:
# 0: index
# 1: sensor type (30 = Power PSM,)
# 2: sensor state (4 = ok)
# 3: current value (Ampere)
# 4: critical level 
# 5: warn low level 
# 6: warn level 
# 7: description 

# Sensor Type : [
# service_desc,
# extended desc, or None, 
# output text, (first %f for current val, then %s for extendet_output)
# extended output, or None, (=device Desc) 
# perfunit
# Current Value Division
# ]

check_rittal_lcp_template = {       
       #LCP Blower 
       40 : ["LCP Blower 1", None, "%irpm %s", False, "RPM", 1],
       41 : ["LCP Blower 2", None, "%irpm %s", False, "RPM", 1],
       42 : ["LCP Blower 3", None, "%irpm %s", False, "RPM", 1],
       43 : ["LCP Blower 4", None, "%irpm %s", False, "RPM", 1],
       44 : ["LCP Blower 5", None, "%irpm %s", False, "RPM", 1],
       45 : ["LCP Blower 6", None, "%irpm %s", False, "RPM", 1],
       
       # LCP Server in 1
       48 : ["LCP Server in 1", None, "%iC %s", None, "Degree", 1],
       # LCP Server out 1
       49 : ["LCP Server out 1", None, "%iC %s", None, "Degree", 1],
       # LCP Server in 2
       50 : ["LCP Server in 2", None, "%iC %s", None, "Degree", 1],
       # LCP Server out 2
       51 : ["LCP Server out 2", None, "%iC %s", None, "Degree", 1],
       # LCP Server in 3
       52 : ["LCP Server in 3", None, "%iC %s", None, "Degree", 1],
       # LCP Server out 3
       53 : ["LCP Server out 3", None, "%iC %s", None, "Degree", 1],       
       # LCP Overview Server in
       56 : ["LCP Overview Server in", None, "%iC %s", False, "Degree", 1],
       # LCP Overview Server out
       57 : ["LCP Overview Server out", None, "%iC %s", None, "Degree", 1],
       # LCP Overview Water in
       58 : ["LCP Overview Water in", None, "%iC %s", None, "Degree", 1],
       # LCP Overview Water out
       59 : ["LCP Overview Water out", None, "%iC %s", None, "Degree", 1],
       # LCP Overview Water Flow
       60 : ["LCP Overview Waterflow", None, "%il/min %s", None, "Liters", 1],
       # LCP Overview Blower Grade
       61 : ["LCP Overview Blower Grade", None, "Grade: %i %s", None, "Grade", 1],
       # LCP Regulator
       62 : ["LCP Overview Regulator", None, "%i Percent %s", None, "Percent", 1],
     }

def inventory_rittal_lcp(checkname, info):
   inventory = []
   for line in info:
     sensor_type  = saveint(line[1])
     if check_rittal_lcp_template.get(sensor_type):
       item = ""
       if check_rittal_lcp_template[sensor_type][0] != None:
	 item = check_rittal_lcp_template[sensor_type][0]
       if check_rittal_lcp_template[sensor_type][1] != None:
	 sensor_index = saveint(line[0].split(".")[1])
	 item += " " + check_rittal_lcp_template[sensor_type][1][sensor_index] 
       inventory.append((item+" - "+line[0],None))
   return inventory


def check_rittal_lcp(item, no_params, info):
  
   item = item.split(" - ")
   item = item[1]
   perf = []
   output = "ERROR"
   
   for line in info: 
     if line[0] != item:
         continue
   
     service_desc,extended_desc,output_txt,extended_output, perf_var, devision = check_rittal_lcp_template[saveint(line[1])]
     
     view_val = float(line[3]) / devision
     if perf_var != None:
       perf = [(perf_var,view_val,"","","","")]
       
     if extended_output == None:
       extended_output = line[4]
     elif extended_output != False:
       sensor_index = saveint(line[0].split(".")[1])
       extended_output = extended_output[sensor_index] 
     else:
       extended_output = ""
     
     output = output_txt % (view_val,extended_output)
     
     status = saveint(line[2])
     if status == 4:
       return(0, "OK - "+output,perf)
     elif status == 7:
       return(1, "WARNING - "+output,perf)
     else:
       return(2, "CRIT - "+output,perf)
   return (3, "Sensor not found")

check_info['rittal_lcp'] = (check_rittal_lcp, "%s", 1,  inventory_rittal_lcp)   

snmp_info['rittal_lcp'] = (".1.3.6.1.4.1.2606.4.2",
   ["3", "4", "5", "6"],
   [  
     "5.2.1.1", # Index
     "5.2.1.2", # Sensor Type
     "5.2.1.4", # Status
     "5.2.1.5", # Value
     "7.2.1.2", # Description
   ]
   )

snmp_scan_functions["rittal_lcp"] = \
        lambda oid: "CMC-TC" in oid(".1.3.6.1.2.1.1.1.0") 

